访问控制
private		protected	public

类,方法和变量修饰符
abstract	class	extends		final	implements	interface	native	new
static		strictfp	synchronized	transient	volatile
 
程序控制
break	continue	return	do	while	if	else	for
instanceof	switch	case	default
 
错误处理
try	cathc	throw	throws
 
包相关
import	package
 
基本类型
boolean		byte	char	double	float	int	long
short		null	true	false
 
变量引用
super	this	void

保留字	goto	const
---------------------------------------------------------------------------------------------------
/*###10.07_面向对象(类及其组成所使用的常见修饰符)(掌握)
* A:修饰符：
	* 权限修饰符：private，默认的，protected，public	protected:保护一个类中某些方法或某些成员变量,不能修饰类
	* 状态修饰符：static，final
	* 抽象修饰符：abstract
* B:类：
	* 权限修饰符：默认修饰符，public
	* 状态修饰符：final					//修饰类,不能被继承
	* 抽象修饰符：abstract					//抽象类,抽象方法必须被重写
	
	* 用的最多的就是：public
	
* C:成员变量：
	* 权限修饰符：private，默认的，protected，public
	* 状态修饰符：static，final
	
	* 用的最多的就是：private				//不让子类访问
	
* D:构造方法：
	* 权限修饰符：private，默认的，protected，public
	
	* 用的最多的就是：public
	
* E:成员方法：
	* 权限修饰符：private，默认的，protected，public
	* 状态修饰符：static，final
	* 抽象修饰符：abstract
	
	* 用的最多的就是：public
	
* F:除此以外的组合规则：
	* 成员变量：public static final
	* 成员方法：
		* public static 
	    * public abstract
		* public final
*/

---------------------------------------------------------------------------------------------------
Java中共有四种访问限制修饰符:private,public,protected,friendly
friendly是默认的,而且不是Java中的关键字.
private:私有,内部访问,很好理解
public:共有,都可以访问,更加好理解
friendly:同一个包可以访问
protected:同一个包或者子类可以访问
如果我只想让子类访问的话就无能为力了(protected减去friendly),这种情况是很普遍的,在父类中定义的方法我可能只想让子类调用,
就像Object中定义的clone方法就只是给子类调用的,因为Object是根类,当然所有类都是他的子类,这个没有什么问题.


修饰符			类	成员访求	构造方法	成员变量	局部变量

abstract(抽象的)	√	√		－		－		－

static （静态的）	－	√		－		√		－

public（公共的）	√	√		√		√		－

protected（受保护的）		√		√		√		－

private（私有的）	－	√		√		√		－

synchronized（同步的）	－	√		－		－		－	(同步代码块)

native（本地的）	－	√		－		－		－

transient（暂时的）	－	－		－		√		－

volatie（易失的）	－	－		－		√		－

final（不要改变的）	√	√		－		√		√

-----------------------------------------------------------------------------------------------	 	 	 	 	 	 

类 修饰符 

Public		可以从其他类中访问

Abstract	本类不能被实例化

Final		不能再声明子类

----------------------------------
构造函数修饰符

Public		可以从所有的类中访问

Protected	只能从自己的类和它的子类中访问

Private		只能在本类中访问

------------------------------------
域/成员变量修饰符  

Public		可以从所有的类中访问

Protected	只能从本类和它的子类中访问

Private		只能从本类中访问它

Static		对该类的所有实例只能有一个域值存在

transient	不是一个对象持久状态的一部份

volatile	可以被异步的线程所修改

final		必须对它赋予初值并且不能修改它

--------------------------------------
局部变量 修饰符 

final		必须对它赋予初值并且不能修改它

-----------------------------------------
方法修饰符 

Public		可以从所有的类中访问它

Protected	只能从本类及其子类中访问它

Private		只能从本类中访问它

abstract	没有方法体，属于一个抽象类

final		子类不能覆盖它

static		被绑定于类本身而不是类的实例

native		该方法由其他编程语言实现

asnchronized	在一个线程调用它之前必须先给它加

===================================================================================
类的修饰符整合

一．类

类的修饰符：

Public:可以在其他任何类中使用，默认为统一包下的任意类。

Abstract:抽象类，不能被实例化，可以包含抽象方法，抽象方法没有被实现，无具体功能，只能衍生子类。

Final:不能被继承。

-------------------------------------------------------
二．变量

变量修饰符：

一个类的成员变量的声明必须在类体中，而不能在方法中，方法中声明的是局部变量。

1.       可访问修饰符：

2.       static：类变量：一个类所拥有的变量，不是类的每个实例有的变量。
                 类变量是指不管类创建了多少对象，系统仅在第一次调用类的时候为类变量分配内存，
                 所有对象共享该类的类变量，因此可以通过类本身或者某个对象来访问类变量。

3.       final：常量。

4.       volatile：声明一个可能同时被并存运行的几个线程所控制和修改的变量。

实例变量：和类变量对应，即每个对象都拥有各自独立的实例变量。

----------------------------------------------------------------------------------
三．方法：（和变量对象分为实例方法和类方法，并用有无static修饰区别）

类方法：使用static关键字说明的方法

1.第一次调用含类方法的类是，系统只为该类创建一个版本，这个版本被该类和该类的所有实例共享。

2.类方法只能操作类变量，不能访问实例变量。类方法可以在类中被调用，不必创建实例来调用，当然也可以通过对象来调用。

实例方法：实例方法可以对当前对象的实例变量操作，而且可以访问类变量。

方法可以重载，要求：方法名相同，但是参数必须有区别。（参数不同可以使类型不同，顺序不同，个数不同）

方法的返回类型：若无返回类型，则声明为void.

方法中的变量作用域：

1.       成员变量：整个类。

2.       局部变量：定义起到方法块结束为止。

3.       方法参数：整个方法或者构造方法。

4.       异常处理参数：参数传递给异常处理方法。

构造方法：和类同名的方法。为新建对象开辟内存空间后，用于初始化新建的对象。不能用对象显式的调用。

静态初始化器：格式：static{<赋值语句组>}


静态初始化器与构造方法的区别： 

静态初始化器			构造方法

对类的静态域初始化		对新建的对象初始化

类进入内存后，系统调用执行	执行new后自动执行

属特殊语句（仅执行一次）	属特殊方法

---------------------------------------------------------
方法的修饰符：

抽象方法：用abstract修饰，只有声明部分，方法体为空，具体在子类中完成。

类方法：静态方法，用static修饰，

1.       调用时，使用类名作为前缀，而不是类的某个实例对象名

2.       不能被单独对象拥有，属于整个类共享。

3.       不能处理成员变量。

最终方法：用final修饰，不能被子类重新定义的方法。

本地方法：用native修饰的方法，表示用其他语言书写的特殊方法，包括C，C++，FORTRAN，汇编语言等。

-----------------------------------------------------------
四．类成员的访问控制符：

即类的方法和成员变量的访问控制符，一个类作为整体对象不可见，并不代表他的所有域和方法也对程序其他部分不可见，需要有他们的访问修饰符判断。

权限如下： 

访问修饰符	同一个类	同包	不同包,子类	不同包,非子类

private		√

默认		√		√

protected	√		√	√

public		√		√	√		√




